
Criar ambiente Virtual : conda create --name python2 python=2.7 -> Cria um ambiente virtual com python 2.7
Selecionar o ambiente: activate python2;
deselecionar o ambiente: deactivate;

info --envs -> Mostra todos os ambientes virtuais

-------------------------------------------

PYTHON COMANDOS

TYPE() - TIPO DA VARIAVEL

var = 'nome _variavel'
idade = 25 
('rodrigo: {one} e tenho {two} anos'.format(one=var,two=idade))

							LISTA


lista = [1.0, 'Hello', [1, 2, 30]]
s = lista[:2] -> O colchete com : seleciona parte da lista

String = 'nome_de_variavel'

split -> divide a string
map -> passa em todas posições
filter -> Caso for verdade pega o valor
-----------------------------------------------------------------------------------------------------------------
NUMPY

np.array(lista) -> cria o array ou matrizes de n dimensões
np.arange(inicio,fim,de quanto em quanto) -> cria arrays de numeros Ranger
np.zeros(qtd) -> cria um array de n-elementos zerados
np.eye(qtd) -> Cria uma matriz endentidade
np.linspace(inicio,fim,qr exibir quantos valores da lista)
np.random.rand(qtd valores aleatorios) -> Distribuição uniforme
np.random.randn(qtd valores aleatorios) -> Distribuição 
np.random.randint(0,100,10) -> Cria um array de valore aleatorio de 0 a 100
np.round(np.random.rand(5)*100,0) -> arredonda primeiro parametro o valor o segundo casa decimal
np.unique(df['col2']) -> Trás resultados unicos da coluna
arr.reshape((5,5)) -> Pega o array e o transforma exemplo matriz de 5x5
arr.shape -> Tamanho do Array ou matriz - Não tem parentes pois é parametro/atributo
arr.max -> maior valor do array
arr.min -> menor valor
arr.argmax() - > retorna o indice da posição do maior valor
arr.argmin() - > retorna o indice da posição do menor valor
arr[:2][:2] -> Recorta um Array
arr2 = arr[:] -> Faz um apontamento para o arr, mudando o arr2 muda o arr para não ocasionar utiliza o .copy()
arr2 = arr[:3].copy()
arr[1:4,5:] -> Antes da virgula seleciona linha dps coluna 
bol = arr > 40 pega os valores maior que 40
arr[bol] -> Devolve em formato de numeros	
np.srqt(Array)
np.exp(Array) -> Exponenciaçao
np.mean(Array) -> Média do Array
np.std(Array) -> Desvio padrão
np.sin(Array) -> Senho dos elementos
np.max(Array)
np.min(Array)
mat.sum(axis=0) -> Soma de coluna 0 e 1 linha
np.random.seed(101) -> Seta os mesmo numeros em qualquer computador SEED

-----------------------------------------------------------------------------------------------------------------
PANDA

pd.Series(data = minha_lista, index=labels) -> cria algo parecido com dicionario minha_lista é sua lista e labels é oq vai ser associado
ser1 + ser2 -> Soma 2 series baseadas no INDICE 
df = pd.DataFrame(np.random.randn(5,4),index='A B C D E'.split(),columns='W X Y Z'.split()) -> Cria DataFrame - 1º Seus valores 2º Indice 3ºColumas
df['W'] -> Filtra colunas
df[['W','Z']] -> Filtra mais de uma, voce cria lista por isso 2[]
df['new'] = df['W'] + df['X'] -> Cria uma nova coluna através de uma soma de 2 colunas
df.drop('new',axis=1) -> Deletar coluna 1º nome da coluna e 2º A linha
df.drop('new',axis=1,inplace=True) -> Com Inplace ele ja apaga no arquivo.
df.loc[['A','B'],['X','Z']] -> Filtrar a tabela 1º Parametro linha, 2º a colunas Baseado nos nomes indices e colunas
df.iloc[1:4,2:] -> Filtras os dados com numpy com numeros.
bol = df > 0 -> Faz seleção com base na condição retorno true e false
df[bol] -> retorna ao inves do true e false retorna os valores da condições
df[df['W']>0]['Y'] -> faz uma condicional onde retorna os valores maior que 0 na linha do 'W' e retorna a coluna Y
df[(df['W'] > 0) & (df['Y'] > 1)] -> seleção bicondicional 
sal['JobTitle'].head(n) Retorna os N primeiros 
sum(sal[sal['Year'] == 2013]['JobTitle'].value_counts() == 1) -> o Sum admiti 0 para false e 1 para True

MULTINÍVEIS

df.reset_index(inplace=True) -> Reseta o indices setando como array [0,1,2,3,..], para mudar realmente passa parametro inplece = True
df.set_index('Estado',inplace=True) -> Seta um novo indice para o DataFrame
hier_index = list(zip(outside,inside)) -> Associa cada item da lista na outra lista
hier_index = pd.MultiIndex.from_tuples(hier_index) -> Indice multinível que é passado como parametro para cria o data frame
df = df.DataFrame(np.random.randn(6,2),index=hier_index, columns=['A','B'])
df.loc['G1'].loc[1] -> acessar os valores deste data frame acima
df.index.names = ['Grupo','Número']
df.xs(1,level="Numero") -> Filtra sem precisar passar pelo Grupo no caso do exemplo
df['Salario'].idxmax() -> a traz a linha que tem valor maximo

AUSENTES

df.dropna(axis,thresh=x) -> Deleta a linha onde há o NaN tendo outros parâmetros com shit + tab
							thresh apaga a linha com a quantidade que passado para ele.
df.fillna(value='') -> substitui os valores ausentes por outro valor
df.fillna(method='ffill') -> substitui o valor ausentes pelo ultimo registro 

GROUPBY

group = df.groupby('Empresa') -> Agrupada com o parâmetro que é passado
group.mean() -> Com o grupo você pode realizar várias operações
group.sum()
group.describe() -> Trás informações com algumas operações feitos como média desvioPadrao max min
group.sum().loc['Sam'] -> Busca SAM neste group sum


CONCATENAR, JUNTAR E MESCLAR
PESQUISAR OLHAR DOCUMENTAÇÃO (PAR
pd.concat([df1,df2,df3])-> concatena baseado na coluna pois o axis padrão é 0
pd.merge(left,right,how="inner",on='key')-> junta os 2 DataFrame onde coluna key tem dados comuns
left.join(right,how="outer") -> Igual do SQL onde junta oq está no join e onde não estiver no left coloca NaN

OPERAÇÕES

df['col2'].unique() -> Trás os resultados da coluna não repetindo dados
df['col2'].nunique() -> Trás a quantidade de dados unicos da coluna.
df['col2'].value_counts() -> Retorna os valores únicos e a quantidade que repete
df['col3'].apply(vezes2) -> chama a função para cada elemento da col3 paracido com map (df['col2'].apply(lambda x: x*x))
del df['col2'] -> a coluna que é passada METÓDO DO PYTHON
df.sort_values(by='col2') ->  Ordena sua coluna passada no parâmetro
df.isnull() -> Mostra os valores nullos 
df.dropna() -> Apaga valores onde tem NaN apagando por padrao linha
df.pivot_table(values='D',index=['A','B'], columns=('C')) -> Funciona como tabela dinâmica excel -> Reorganiza a tabela como você quer.

ENTRADA E SAÍDA DE DADOS

df = pd.read_csv('exemplo',sep=',') -> importa o excel para seu dataFrame
df.to_csv("exemplo.csv",sep=';',decimal=',') -> Exporta o DataFrame para excel
df = pd.read_excel('Exemplo_Excel.xlsx',sheetname='Sheet1') -> importa o excel da planilha com nome 'Sheet1'
df.to_excel("exemplo_Excel.xlsx",sheet_name='sheet1') -> Exporta para a planilha com nome sheet1

CORRELAÇÃO
sal['tamanho da string'] = sal['JobTitle'].apply(len)
sal[['tamanho da string','TotalPayBenefits']].corr() -> Verifica se quanto maior a string maior o salario


----------------------------------------------------------------------------------------------------
MATPLOTLIB


%matplotlib inline -> Exibi o grafico na linha

plt.plot(x,y,'r--') -> Gera o grafico com  a cor RED 'r'  e os traços o grafico fica tracejado
plt.xlabel('Eixo X') -> muda nome no eixo x
plt.ylabel('Eixo Y') -> muda nome no eixo y
plt.title('Titulo') -> muda nome o titulo

plt.subplot(1,2,1) -> gera 2 graficos 1º Linha 2ºColuna 3ºO grafico que deseja trabalhar

fig = plt.figure()-> Cria um figura em branco
axes1 = fig.add_axes([0.1,0.1,0.8,0.8]) -> configura o tamanho da figura
axes2 = fig.add_axes([0.2,0.5,0.3,0.3]) -> configura o tamanho da figura2 1ºmargem esquerda 2º baixo 3º direita 4ºcima
axes1.plot(x,y)
axes1.set_xlabel('Eixo x')
axes1.set_title('Titulo')
axes2.plot(y,x)

fig,ax = plt.subplots()-> Instancia um objeto da classe matplotlib
ax.plot(x,x**3,'b--')
ax.plot(x,x**4,'g-.')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_title('Titulo')

fig,ax = plt.subplots(1,2) -> gera um Array de objetos

fig,ax = plt.subplots(5,5)
plt.tight_layout()-> Não deixa os graficos ficar sobrepostos


fig = plt.figure(figsize=(50,20),dpi=400) -> nao entendi pois o metodo n afeta em nada

fig,axes = plt.subplots(figsize=(12,8)) -> Altera o tamanho da figura
axes.plot(x,y,'r-')
axes.set_title('titulo')
fig.savefig("imagem.png") -> salva a sua figura nos formatos png jpg gif

axes.plot(x,y,'r-',label='x ^2') -> parametros labels adiciona legenda
axes.legend(loc=0) -> Inserir legendas 1º posição da legenda no 0 deixa a lib escolher a melhor forma (menos dados em volta)

ax.plot(x,x**2,color='#000000',linewidth=10,alpha=0.8,linestyle=':') -> linewidth largura da linha , alpha transparência, linestyle tipo da linha
ax.plot(x,x**3,'r--')

ax.set_xlim([0,2]) -> limite dos eixos
ax.set_ylim([0,10]) ->mite dos eixos


---------------------------------------------------------------------------------------------------------------

SEABORN

PLOTS DE DISTRIBUIÇÃO
tips = sns.load_dataset('tips') -> Importa nosso dataframe
sns.distplot(tips['total_bill'],kde=False,bins=60) -> Gera uma distribução com uma variavel 1º dados, 2º linha do grafico, 3ºQtd de barras
sns.jointplot(x='total_bill',y='tip',data=tips,kind='hex') -> Gera um histograma com 2 varias se tem relação, KIND -> Gera o tipo dele 'hex' um hexagonos com com cores mais forte com maior população, reg uma reta linear
sns.pairplot(tips,hue='sex',palette='coolwarm') -> Gera um grafico com todas as possibilidades numericas, HUE cria uma analise dados com base em alguma coluna de texto exemplo Sexo.
sns.rugplot(tips['total_bill']) -> Gera um traço para cada dado passado.
sns.kdeplot(tips['total_bill']) -> KDE gera uma soma da distribuição normal centrada em seus dados. 

PLOTS CATEGÓRICOS
sns.barplot(x='sex',y='total_bill',data=tips,estimator=np.std) -> Gera um grafico onde mostra a media de cada sexo no total de compra, colocando o estimator
																tem se o desvio padrão ao invés da media.
sns.countplot(x='sex',data=tips)-> Mostra a quantidade de cada informação.
sns.boxplot(x='day',y='total_bill',data=tips, palette='rainbow',hue='sex') -> um grafico onde tem se a 1º barra a 2º 25% dos dados 2º a 3º 50% dos dados, 3º a 4 75% dos dados e 4º total dos dados.
																			com o hue irá quebrar os boxplot em 2 fem e masc
  sns.boxplot(data=tips, palette='rainbow',orient='h') ->  Boxplot na horizontal
  sns.violinplot(x='day',y='tip',data=tips,hue='sex',split=True) -> Gera um KDE com o boxplot mostrando a dispersão dos dados. split cria o lado esquerdo é fem e o direito masculino
  sns.stripplot(x='day',y='total_bill',data=tips, jitter=True, hue='sex', split=True) -> forma uma linha de dados com bolas mas podendo ficar em cima da outra										
																					com jitter os ponto fica um pouco do lado, split quebra os fem e masc
sns.swarmplot(x='day',y='total_bill',data=tips, hue='sex',split=True) -> Mostra os dados um pouco mais separados que o stripplot.

sns.swarmplot(x='day',y='total_bill',data=tips,color='black')
sns.violinplot(x='day',y='total_bill',data=tips) -> com os 2 plots dando uma visão melhor
sns.factorplot(x='sex',y='total_bill',data=tips,kind='bar') -> assume qualquer dos graficos acima com o parametro kind
																
sns.heatmap(crr, cmap='coolwarm', annot=True)-> Mostra a correlação entre as variáveis em formato de mapa de calor, 1º sua correlação, 2ºEsquema de cores, 3ºMostra valores dentro dos quadrados
pf = fights.pivot_table(values='passengers',index='month',columns='year') -> Reorganiza a tabela com metodo do Pandas para melhor análise o value sempre é numerico
sns.heatmap(pf,cmap='magma',linecolor='gray',linewidth=1) -> 2ºCor da linha que divide os quadrados, 3º a espessura da linha.
sns.clustermap(pf,standard_scale=1) -> Faz um agrupamento dos dados Pesquisar mais sobre a biblioteca, 2º scala das cores.


sns.lmplot(x='total_bill',y='tip',data=tips,hue='sex',col='day',aspect=0.6,size=5) -> 'COL' coloca cada dia em um grafico, 'ASPECT' Muda o aspecto do grafico	'SIZE' Tamanho do grafico
sns.lmplot(x='total_bill',y='tip',data=tips,hue='sex',col='sex',row='time') -> 'ROW' Coloca esse dados em linhas
sns.lmplot(x='total_bill',y='tip',data=tips,hue='sex',markers=['o','v'],scatter_kws={'s':50}) -> 'MARKERS' Substitui os pontos por outra representação
																									'SCATTER_KWS' passa um dic 'S' de Size dando zoom e tirando

PAIR GRIDS

g = sns.PairGrid(iris) -> cria todos os graficos possiveis de dispersão de dados vazios
g.map(plt.scatter) -> Com essa linha mostra as dispersão entre todas as variaveis -> Parecido com PairPlot

g = sns.PairGrid(iris)
g.map_diag(plt.hist) -> Gera Graficos de barras (Histograma na diagonal
g.map_upper(plt.scatter) -> transforma a diagonal de cima em grafico de dispersão bolinhas
g.map_lower(sns.kdeplot) -> Transforma a diagonal de baixo em grafico de kde com o parametro sns.kdeplot

g = sns.FacetGrid(tips,col='time',row='smoker') -> Pega seu dados CATEGORICOS, fala q a coluna é time é a linha smoker
g.map(plt.hist,'total_bill') -> monta o gráfico em função do 'total_bill'

ESTILOS E CORES

sns.set_style('ticks')-> Muda o estilo do grafico o fundo a borda
sns.countplot(x='sex',data=tips) -> monta o grafico com quantidade de variavel
sns.despine()-> Posso tirar o contorno de qualquer lado do grafico
plt.figure(figsize=(12,8)) -> COmo o SEABORN faz parte do matplotlib ele pode usar o metodo para alter tamanho da figura
sns.lmplot(x='total_bill',y='tip',data=tips,size=2,aspect=15) -> Regressão Linear podendo mudar os aspecto com size e aspect
sns.set_context('poster',font_scale=1) -> muda o estilo do grafico podendo aumentar a fonte
sns.lmplot(x='total_bill',y='tip',data=tips,hue='sex',palette='inferno) -> Pallete esquema de cores que pode se usado ao pesquisar em https://matplotlib.org/3.1.0/tutorials/colors/colormaps.html


df1['A'].hist() -> plota um histograma ficando mais bonito importando seaborn
df2.plot.bar(stacked=True) -> Gera um grafico de barras com o parametro Stacked ele junta tudo na mesma barra
df1.plot.line(x=df1.index,y='B',figsize=(12,5),lw=1) -> Forma um grafico de linha.
df1.plot.scatter(x='A',y='B',s=df1['C']) -> Com essa linha mostra as dispersão entre todas as variaveis entre as variaveis A e B e dependendo do valor C muda a cor das bolinhas
df2.plot.box() -> Faz um box ploat
df.plot.hexbin(x='A',y='B',gridsize=20,cmap='Oranges') -> Cria um grafico hexagonal 
df.plot.kde() -> Mostra o kde de todas variaveis



